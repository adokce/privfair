num_classes = 7 #int(program.args[1])  # 6
N = 56   # num of images 10
h = 48 #int(program.args[3])   # 48
w = 48 #int(program.args[4])   # 48
c = 1 #int(program.args[5])   #  1

program.use_split(3)
program.use_trunc_pr = True
program.options.cisc = True

from ml import *
Layer.n_threads = 4
FixConv2d.use_conv2ds = True



# define architecture of the CNN
layers = [
        FixConv2d([1,48,48,1], (5,5,1,64), (64,), [1, 44, 44, 64], (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 44, 44, 64]),
        FixAveragePool2d((1, 44, 44, 64), (1, 20, 20, 64), (5, 5),(2,2)),
        FixConv2d((1, 20, 20, 64), ( 3, 3, 64, 64), (64,), (1, 18, 18, 64), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 18, 18, 64]),
        FixConv2d((1, 18, 18, 64), (3, 3, 64,64), (64,), (1, 16, 16, 64), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 16, 16, 64]),
        FixAveragePool2d((1, 16, 16, 64), (1, 7, 7, 64), (3, 3),(2,2)),
        FixConv2d((1, 7, 7, 64), ( 3, 3, 64,128), (128,), (1, 5, 5, 128), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 5, 5, 128]),
        FixConv2d((1, 5, 5, 128), ( 3, 3, 128,128), (128,), (1, 3, 3, 128), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 3, 3, 128]),
        FixAveragePool2d((1, 3, 3, 128), (1, 1, 1, 128), (3, 3),(2,2)),
        Dense(1,128,1024,activation='relu'),
        Dense(1,1024,1024,activation='relu'),
        Dense(1,1024,7,activation='id'),
        Argmax((1, 7))
        ]

# read secret shares of images
alice = MultiArray([N,h,w,c],sfix)
alice.input_from(0)

# get labels
y_true = sint.Array(N)
y_true.input_from(0)
y_predict = Array(N,sint)

# get sensitive attributes 0: female 1: male
sensitive = Array(N,sint)
sensitive.input_from(0)


for layer in layers:
    layer.input_from(1)

graph = Optimizer()
graph.layers = layers

@for_range(N)
def _(i):
    layers[0].X.assign_vector(alice[i].get_vector())
    graph.forward(1)
    y_predict[i] = layers[-1].Y[0]


#print_ln("%s", y_true.reveal_nested())
#print_ln("%s", y_predict.reveal_nested())
#print_ln("%s", sensitive.reveal_nested())

## calculate TN,TP,FN,FP
TP_M = sint(0)
TN_M = sint(0)


TP_F = sint(0)
TN_F = sint(0)


count_m = (sum(sensitive))
count_f = N - count_m

#print_ln("%s,%s,%s,%s", N,sum(sensitive).reveal(), count_m.reveal(), count_f.reveal())


for class_ in range(num_classes):

	for i in range(N):
        #def _(i):
            truth_is_class = y_true[i].__eq__(class_)
            pred_is_class = y_predict[i].__eq__(class_)
                    
            is_Protected = sensitive[i]

            tp_sum = truth_is_class + pred_is_class
            tp = (tp_sum == 2)
            tn = (tp_sum == 0)

            TP_M = TP_M + (tp * is_Protected)
            TN_M = TN_M + (tn * is_Protected)
            
            TP_F = TP_F + (tp * (1-is_Protected))
            TN_F = TN_F + (tn * (1-is_Protected))



acc_m = (TP_M + TN_M)# / count_m
acc_f = (TP_F + TN_F)# / count_f
acc_m = acc_m.int_div(count_m)
acc_f = acc_f.int_div(count_f)
#print_ln("%s, %s", acc_m.reveal(), acc_f.reveal())



    


